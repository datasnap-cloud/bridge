"""
M√≥dulo HTTP para comunica√ß√£o com a API DataSnap
"""

import os
import time
import json
from typing import Dict, Any, Optional, Tuple
from urllib.parse import urljoin

import requests
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry

from .logger import logger


def _generate_curl_command(method: str, url: str, headers: Dict[str, str], data: Optional[Dict[str, Any]] = None, params: Optional[Dict[str, Any]] = None) -> str:
    """
    Gera um comando curl equivalente √† requisi√ß√£o HTTP
    
    Args:
        method: M√©todo HTTP
        url: URL completa
        headers: Headers da requisi√ß√£o
        data: Dados JSON (opcional)
        params: Par√¢metros de query (opcional)
        
    Returns:
        str: Comando curl formatado
    """
    # Construir URL com par√¢metros se existirem
    if params:
        param_str = "&".join([f"{k}={v}" for k, v in params.items()])
        url = f"{url}?{param_str}"
    
    # Come√ßar comando curl
    curl_parts = [f"curl -X {method}"]
    
    # Adicionar headers
    for key, value in headers.items():
        # Mascarar token de autoriza√ß√£o para seguran√ßa
        if key.lower() == 'authorization' and 'Bearer' in value:
            masked_value = f"Bearer {value.split(' ')[1][:10]}..."
            curl_parts.append(f'-H "{key}: {masked_value}"')
        else:
            curl_parts.append(f'-H "{key}: {value}"')
    
    # Adicionar dados JSON se existirem
    if data:
        json_data = json.dumps(data, separators=(',', ':'))
        curl_parts.append(f"-d '{json_data}'")
    
    # Adicionar URL
    curl_parts.append(f'"{url}"')
    
    return " \\\n  ".join(curl_parts)


class DataSnapHTTPClient:
    """Cliente HTTP para a API DataSnap com retries e configura√ß√µes otimizadas"""
    
    def __init__(self, base_url: Optional[str] = None):
        """
        Inicializa o cliente HTTP
        
        Args:
            base_url: URL base da API (padr√£o: https://api.datasnap.cloud)
        """
        self.base_url = base_url or os.getenv("DATASNAP_API_BASE_URL", "https://api.datasnap.cloud")
        if not self.base_url.endswith('/'):
            self.base_url += '/'
        
        logger.debug(f"üåê Inicializando DataSnapHTTPClient com base_url: {self.base_url}")
        self.session = self._create_session()
        logger.debug("‚úÖ Cliente HTTP inicializado com sucesso")
    
    def _create_session(self) -> requests.Session:
        """
        Cria uma sess√£o HTTP configurada com retries e timeouts otimizados
        
        Returns:
            requests.Session: Sess√£o configurada
        """
        session = requests.Session()
        
        # Configurar headers padr√£o otimizados
        session.headers.update({
            'User-Agent': 'insomnia/11.1.0',  # User-Agent que funciona bem
            'Content-Type': 'application/json',
            'Accept': 'application/json',
            'Connection': 'keep-alive',  # Reutilizar conex√µes
            'Accept-Encoding': 'gzip, deflate'  # Compress√£o
        })
        
        # Configurar estrat√©gia de retry mais agressiva
        retry_strategy = Retry(
            total=1,  # Apenas 1 retry para ser mais r√°pido
            backoff_factor=0.1,  # Backoff m√≠nimo: 0.1s
            status_forcelist=[429, 500, 502, 503, 504],  # Status codes para retry
            allowed_methods=["HEAD", "GET", "OPTIONS", "POST", "PUT", "DELETE"]
        )
        
        # Aplicar adapter com retry para HTTP e HTTPS
        adapter = HTTPAdapter(
            max_retries=retry_strategy,
            pool_connections=10,  # Pool de conex√µes
            pool_maxsize=10,      # M√°ximo de conex√µes no pool
            pool_block=False      # N√£o bloquear se pool estiver cheio
        )
        session.mount("http://", adapter)
        session.mount("https://", adapter)
        
        # Configurar SSL de forma mais simples e r√°pida
        session.verify = False  # Desabilitar SSL para m√°xima performance
        # Suprimir warnings de SSL
        import urllib3
        urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
        
        return session
    
    def _make_request(
        self, 
        method: str, 
        endpoint: str, 
        token: Optional[str] = None,
        data: Optional[Dict[str, Any]] = None,
        params: Optional[Dict[str, Any]] = None
    ) -> Tuple[int, Dict[str, Any]]:
        """
        Faz uma requisi√ß√£o HTTP
        
        Args:
            method: M√©todo HTTP (GET, POST, etc.)
            endpoint: Endpoint da API (ex: 'auth/me')
            token: Token de autoriza√ß√£o (Bearer)
            data: Dados para enviar no body (JSON)
            params: Par√¢metros de query string
            
        Returns:
            Tuple[int, Dict[str, Any]]: (status_code, response_data)
            
        Raises:
            requests.RequestException: Para erros de rede/HTTP
        """
        url = urljoin(self.base_url, endpoint)
        
        # Configurar headers da requisi√ß√£o
        headers = {
            'User-Agent': 'insomnia/11.1.0',  # Usar o mesmo User-Agent que funciona
            'Content-Type': 'application/json',
            'Accept': 'application/json',
            'Connection': 'keep-alive',
            'Accept-Encoding': 'gzip, deflate'
        }
        
        if token:
            headers['Authorization'] = f'Bearer {token}'
        
        # Gerar e logar comando curl equivalente
        curl_command = _generate_curl_command(method, url, headers, data, params)
        logger.debug(f"üîß Comando curl equivalente:\n{curl_command}")
        
        # Log da requisi√ß√£o
        logger.debug(f"üîÑ {method} {url}")
        if params:
            logger.debug(f"üìã Query params: {params}")
        if data:
            logger.debug(f"üì§ Request data: {json.dumps(data, indent=2)}")
        if token:
            logger.debug(f"üîë Token presente: {token[:10]}...")
        
        # Configurar timeouts mais agressivos
        timeout = (3, 10)  # (connect_timeout, read_timeout) - mais r√°pido
        
        try:
            start_time = time.time()
            response = self.session.request(
                method=method,
                url=url,
                headers=headers,
                json=data,
                params=params,
                timeout=timeout,
                stream=False  # N√£o usar streaming para ser mais r√°pido
            )
            elapsed_time = time.time() - start_time
            
            logger.debug(f"‚è±Ô∏è Requisi√ß√£o completada em {elapsed_time:.2f}s - Status: {response.status_code}")
            
            # Tentar parsear JSON da resposta
            try:
                response_data = response.json()
                logger.debug(f"üì• Response data: {json.dumps(response_data, indent=2)}")
            except (json.JSONDecodeError, ValueError):
                # Se n√£o for JSON v√°lido, usar texto da resposta
                response_data = {"message": response.text or "Resposta vazia"}
                logger.debug(f"üì• Response text: {response.text}")
            
            return response.status_code, response_data
            
        except requests.exceptions.Timeout:
            logger.error("‚è∞ Timeout na requisi√ß√£o HTTP")
            logger.error(f"üîß Comando curl que falhou:\n{curl_command}")
            raise requests.RequestException("Timeout na requisi√ß√£o")
        except requests.exceptions.RequestException as e:
            logger.error(f"‚ùå Erro na requisi√ß√£o HTTP: {e}")
            logger.error(f"üîß Comando curl que falhou:\n{curl_command}")
            raise requests.RequestException(f"Erro na requisi√ß√£o: {e}")
    
    def validate_token(self, token: str) -> Tuple[bool, str]:
        """
        Valida um token de API fazendo uma requisi√ß√£o para /auth/me
        
        Args:
            token: Token para validar
            
        Returns:
            Tuple[bool, str]: (is_valid, message)
        """
        logger.debug(f"üîç Validando token: {token[:10]}...")
        
        try:
            status_code, response_data = self._make_request(
                method="GET",
                endpoint="auth/me",
                token=token
            )
            
            if status_code == 200:
                logger.debug("‚úÖ Token validado com sucesso")
                return True, "Token v√°lido"
            elif status_code == 401:
                logger.warning("üö´ Token inv√°lido ou expirado")
                return False, "Token inv√°lido ou expirado"
            elif status_code == 403:
                logger.warning("üîí Token sem permiss√µes necess√°rias")
                return False, "Token sem permiss√µes necess√°rias"
            else:
                message = response_data.get("message", f"Erro HTTP {status_code}")
                logger.error(f"‚ùå Erro na valida√ß√£o do token - Status {status_code}: {message}")
                return False, f"Erro na valida√ß√£o: {message}"
                
        except requests.RequestException as e:
            logger.error(f"üåê Erro de rede na valida√ß√£o do token: {e}")
            return False, f"Erro de rede: {e}"
    
    def get_schemas(self, token: str) -> Tuple[bool, Any]:
        """
        Busca os schemas/modelos de dados da API
        
        Args:
            token: Token de autoriza√ß√£o
            
        Returns:
            Tuple[bool, Any]: (success, data_or_error_message)
        """
        try:
            status_code, response_data = self._make_request(
                method="GET",
                endpoint="v1/schemas",
                token=token
            )
            
            if status_code == 200:
                return True, response_data
            elif status_code == 401:
                return False, "Token inv√°lido ou expirado"
            elif status_code == 403:
                return False, "Token sem permiss√µes para acessar schemas"
            elif status_code == 404:
                return False, "Endpoint de schemas n√£o encontrado"
            else:
                message = response_data.get("message", f"Erro HTTP {status_code}")
                return False, f"Erro ao buscar schemas: {message}"
                
        except requests.RequestException as e:
            return False, f"Erro de rede: {e}"
    
    def test_connection(self) -> Tuple[bool, str]:
        """
        Testa a conectividade com a API usando um endpoint v√°lido
        
        Returns:
            Tuple[bool, str]: (success, message)
        """
        try:
            # Usar um endpoint que sabemos que existe
            status_code, response_data = self._make_request(
                method="GET",
                endpoint="auth/me",  # Endpoint que sabemos que existe
                token="invalid_token_for_test"  # Token inv√°lido apenas para testar conectividade
            )
            
            # Se chegou at√© aqui, a conectividade est√° OK
            # Status 401 √© esperado com token inv√°lido
            if status_code in [200, 401]:
                return True, "Conex√£o OK"
            else:
                return False, f"API retornou status {status_code}"
                
        except requests.RequestException as e:
            return False, f"Erro de rede: {e}"


# Inst√¢ncia global do cliente HTTP
http_client = DataSnapHTTPClient()
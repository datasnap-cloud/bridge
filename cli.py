#!/usr/bin/env python3
"""
CLI principal do DataSnap Bridge
"""

import asyncio
import typer
from rich.console import Console
from rich.table import Table
from typing import List, Optional

from core.logger import logger

app = typer.Typer(
    name="bridge",
    help="DataSnap Bridge - Ferramenta de linha de comando para DataSnap",
    add_completion=False
)

console = Console()


@app.command()
def setup():
    """
    Menu interativo para configurar API Keys e consultar Schemas da DataSnap
    
    Este comando abre um menu TUI (Terminal User Interface) que permite:
    - Cadastrar e validar API Keys da DataSnap
    - Listar API Keys cadastradas (com tokens mascarados)
    - Consultar Modelos de Dados (Schemas) da API
    - Gerenciar configura√ß√µes de forma segura
    
    Todos os dados sens√≠veis s√£o criptografados e armazenados localmente.
    """
    logger.info("üöÄ Iniciando comando setup")
    
    try:
        from setup.menu import run_setup_menu
        logger.debug("üìã Carregando menu de setup")
        run_setup_menu()
        logger.info("‚úÖ Comando setup finalizado com sucesso")
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è Setup interrompido pelo usu√°rio")
        console.print("\n[yellow]üëã Saindo...[/yellow]")
    except ImportError as e:
        logger.error(f"üì¶ Erro ao importar m√≥dulos: {e}")
        console.print(f"[red]‚ùå Erro ao importar m√≥dulos: {e}[/red]")
        console.print("[dim]Verifique se todas as depend√™ncias est√£o instaladas.[/dim]")
        raise typer.Exit(1)
    except Exception as e:
        logger.exception(f"üí• Erro inesperado no setup: {e}")
        console.print(f"[red]‚ùå Erro inesperado: {e}[/red]")
        raise typer.Exit(1)


@app.command()
def version():
    """
    Exibe informa√ß√µes sobre a vers√£o do Bridge
    """
    console.print("[bold blue]DataSnap Bridge v0.1.0[/bold blue]")
    console.print("[dim]Ferramenta de linha de comando para DataSnap API[/dim]")


@app.command()
def sync(
    mappings: Optional[List[str]] = typer.Option(None, "--mapping", "-m", help="Mapeamentos espec√≠ficos para sincronizar"),
    all_mappings: bool = typer.Option(False, "--all", "-a", help="Sincronizar todos os mapeamentos"),
    parallel: bool = typer.Option(True, "--parallel/--sequential", help="Executar sincroniza√ß√µes em paralelo"),
    dry_run: bool = typer.Option(False, "--dry-run", help="Simular execu√ß√£o sem fazer upload real"),
    force: bool = typer.Option(False, "--force", "-f", help="For√ßar sincroniza√ß√£o completa"),
    status_only: bool = typer.Option(False, "--status", help="Mostrar apenas o status das sincroniza√ß√µes"),
    max_workers: int = typer.Option(4, "--workers", "-w", help="N√∫mero m√°ximo de workers paralelos"),
    batch_size: int = typer.Option(10000, "--batch-size", "-b", help="Tamanho do lote de registros"),
):
    """
    Sincroniza mapeamentos com a API DataSnap
    
    Este comando executa o pipeline de sincroniza√ß√£o que:
    - Extrai dados das fontes configuradas
    - Converte para formato JSONL
    - Faz upload para a API DataSnap
    - Coleta m√©tricas e mant√©m estado
    
    Exemplos:
    - bridge sync --all                    # Sincroniza todos os mapeamentos
    - bridge sync -m users -m products     # Sincroniza mapeamentos espec√≠ficos
    - bridge sync --dry-run --all          # Simula sincroniza√ß√£o de todos
    - bridge sync --status                 # Mostra status das sincroniza√ß√µes
    """
    logger.info("üîÑ Iniciando comando sync")
    
    try:
        from sync.runner import SyncConfig, run_sync_command, create_sync_runner, format_sync_results
        
        if status_only:
            # Mostrar apenas status
            runner = create_sync_runner()
            status = runner.get_sync_status()
            _display_sync_status(status)
            return
        
        # Validar par√¢metros
        if not all_mappings and not mappings:
            console.print("[red]‚ùå Especifique mapeamentos com --mapping ou use --all[/red]")
            raise typer.Exit(1)
        
        # Configurar sincroniza√ß√£o
        config = SyncConfig(
            max_workers=max_workers,
            batch_size=batch_size,
            dry_run=dry_run,
            force_full_sync=force
        )
        
        # Executar sincroniza√ß√£o
        console.print("[bold blue]üîÑ Iniciando sincroniza√ß√£o...[/bold blue]")
        if dry_run:
            console.print("[yellow]‚ö†Ô∏è Modo simula√ß√£o ativado - nenhum upload ser√° realizado[/yellow]")
        
        logger.info(f"[DEBUG] Prestes a chamar asyncio.run com mapping_names: {mappings}, all_mappings: {all_mappings}")
        
        results = asyncio.run(run_sync_command(
            mapping_names=mappings,
            all_mappings=all_mappings,
            parallel=parallel,
            dry_run=dry_run,
            force=force,
            config=config
        ))
        
        logger.info(f"[DEBUG] asyncio.run retornou com {len(results)} resultados")
        
        # Exibir resultados
        console.print("\n" + format_sync_results(results))
        
        # Verificar se houve falhas
        failed_count = len([r for r in results if not r.success])
        if failed_count > 0:
            logger.warning(f"Sincroniza√ß√£o conclu√≠da com {failed_count} falhas")
            raise typer.Exit(1)
        else:
            logger.info("‚úÖ Sincroniza√ß√£o conclu√≠da com sucesso")
            
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è Sincroniza√ß√£o interrompida pelo usu√°rio")
        console.print("\n[yellow]üëã Sincroniza√ß√£o interrompida...[/yellow]")
        raise typer.Exit(130)
    except ImportError as e:
        logger.error(f"üì¶ Erro ao importar m√≥dulos de sincroniza√ß√£o: {e}")
        console.print(f"[red]‚ùå Erro ao importar m√≥dulos: {e}[/red]")
        console.print("[dim]Verifique se todas as depend√™ncias est√£o instaladas.[/dim]")
        raise typer.Exit(1)
    except Exception as e:
        logger.exception(f"üí• Erro inesperado na sincroniza√ß√£o: {e}")
        console.print(f"[red]‚ùå Erro inesperado: {e}[/red]")
        raise typer.Exit(1)


def _display_sync_status(status: dict):
    """Exibe o status das sincroniza√ß√µes em formato tabular."""
    console.print("[bold blue]üìä Status das Sincroniza√ß√µes[/bold blue]")
    console.print("‚îÄ" * 50)
    
    # Informa√ß√µes gerais
    console.print(f"Total de mapeamentos: [cyan]{status['total_mappings']}[/cyan]")
    console.print(f"Sincroniza√ß√µes em execu√ß√£o: [yellow]{len(status['running_syncs'])}[/yellow]")
    
    if status['running_syncs']:
        console.print(f"Executando: [yellow]{', '.join(status['running_syncs'])}[/yellow]")
    
    # Tabela de √∫ltimas sincroniza√ß√µes
    if status['last_sync_times']:
        console.print("\n[bold]√öltimas Sincroniza√ß√µes:[/bold]")
        table = Table(show_header=True, header_style="bold magenta")
        table.add_column("Mapeamento", style="cyan")
        table.add_column("√öltima Sincroniza√ß√£o", style="green")
        table.add_column("Total de Syncs", style="blue")
        table.add_column("Erros", style="red")
        
        for mapping in status['last_sync_times']:
            last_sync = status['last_sync_times'].get(mapping, "Nunca")
            sync_count = status['sync_counts'].get(mapping, 0)
            error_count = status['error_counts'].get(mapping, 0)
            
            table.add_row(
                mapping,
                str(last_sync),
                str(sync_count),
                str(error_count) if error_count > 0 else "0"
            )
        
        console.print(table)
    else:
        console.print("\n[dim]Nenhuma sincroniza√ß√£o executada ainda.[/dim]")


@app.command()
def status():
    """
    Exibe o status do sistema e conectividade
    """
    try:
        from core.http import http_client
        from core.secrets_store import secrets_store
        
        console.print("[bold blue]üìä Status do Sistema[/bold blue]")
        console.print("‚îÄ" * 30)
        
        # Carregar secrets store
        secrets_store.load()
        keys_count = secrets_store.get_keys_count()
        console.print(f"API Keys cadastradas: [cyan]{keys_count}[/cyan]")
        
        # Testar conectividade
        success, message = http_client.test_connection()
        status_color = "green" if success else "red"
        status_icon = "‚úÖ" if success else "‚ùå"
        console.print(f"Conectividade API: [{status_color}]{status_icon} {message}[/{status_color}]")
        
        # Status das sincroniza√ß√µes
        try:
            from sync.runner import create_sync_runner
            runner = create_sync_runner()
            sync_status = runner.get_sync_status()
            console.print(f"Mapeamentos dispon√≠veis: [cyan]{sync_status['total_mappings']}[/cyan]")
            console.print(f"Sincroniza√ß√µes ativas: [yellow]{len(sync_status['running_syncs'])}[/yellow]")
        except Exception:
            console.print("Status de sincroniza√ß√£o: [dim]N√£o dispon√≠vel[/dim]")
        
    except Exception as e:
        console.print(f"[red]‚ùå Erro ao verificar status: {e}[/red]")
        raise typer.Exit(1)


if __name__ == "__main__":
    try:
        app()
    except KeyboardInterrupt:
        console.print("\n[yellow]üëã Saindo...[/yellow]")
        raise typer.Exit(0)
"""
Menu interativo TUI para o comando bridge setup
"""

from typing import Dict, Callable
from rich.console import Console
from rich.panel import Panel
from rich.prompt import Prompt
from rich.text import Text

from core.secrets_store import secrets_store
from core.datasources_store import datasources_store
from core.logger import logger
from setup.actions import register_api_key, list_api_keys, list_schemas, show_statistics
from setup.datasources_menu import run_datasources_menu


from setup.ui_helpers import (
    show_success_message, show_error_message, show_warning_message, 
    show_info_message, wait_for_continue, show_header, show_separator
)


console = Console()


def run_setup_menu() -> None:
    """
    Executa o menu principal do setup
    """
    logger.info("üöÄ Iniciando menu de setup do DataSnap Bridge")
    try:
        # Inicializar o sistema
        _initialize_system()
        
        # Loop principal do menu
        while True:
            if not _show_main_menu():
                logger.info("üëã Saindo do menu de setup")
                break
                
    except KeyboardInterrupt:
        logger.info("‚ö†Ô∏è Menu de setup interrompido pelo usu√°rio")
        console.print("\n[yellow]üëã Saindo...[/yellow]")
    except Exception as e:
        logger.exception(f"‚ùå Erro inesperado no menu de setup: {e}")
        console.print(f"\n[red]‚ùå Erro inesperado: {e}[/red]")


def _initialize_system() -> None:
    """
    Inicializa o sistema criando diret√≥rios necess√°rios
    """
    try:
        # Garantir que os diret√≥rios existam
        from core.paths import ensure_bridge_directory
        ensure_bridge_directory()
        
        # Carregar secrets store
        secrets_store.load()
        
    except Exception as e:
        console.print(f"[red]‚ùå Erro ao inicializar sistema: {e}[/red]")
        raise


def _show_main_menu() -> bool:
    """
    Exibe o menu principal e processa a escolha do usu√°rio
    
    Returns:
        bool: True para continuar, False para sair
    """
    try:
        # Limpar tela (opcional)
        console.clear()
        
        # Exibir cabe√ßalho
        show_header()
        
        # Exibir estat√≠sticas r√°pidas
        _show_quick_stats()
        
        # Exibir op√ß√µes do menu
        console.print("\nüìã [bold]Op√ß√µes dispon√≠veis:[/bold]")
        console.print("  [cyan]1.[/cyan] Cadastrar/Listar API Keys")
        console.print("  [cyan]2.[/cyan] Listar Modelos de Dados (Schemas)")
        console.print("  [cyan]3.[/cyan] Fontes de Dados")
        console.print("  [cyan]0.[/cyan] Sair")
        
        # Obter escolha do usu√°rio
        choice = Prompt.ask(
            "\nüéØ Escolha uma op√ß√£o",
            choices=["0", "1", "2", "3"],
            default="0"
        )
        
        # Menu de op√ß√µes
        menu_options: Dict[str, Callable[[], bool]] = {
            "1": register_api_key,
            "2": list_schemas,
            "3": run_datasources_menu,
            "0": lambda: False  # Sair
        }
        
        while True:
            
            logger.debug(f"üéØ Op√ß√£o selecionada no menu principal: {choice}")
            
            if choice in menu_options:
                if choice == "0":
                    logger.debug("üö™ Usu√°rio escolheu sair do menu")
                    return False  # Sair
                
                # Executar a√ß√£o
                try:
                    logger.debug(f"üîÑ Executando a√ß√£o do menu: {choice}")
                    result = menu_options[choice]()
                    
                    # Aguardar antes de voltar ao menu
                    if result:
                        wait_for_continue()
                    
                    return True  # Continuar no menu
                    
                except Exception as e:
                    logger.exception(f"‚ùå Erro na opera√ß√£o do menu {choice}: {e}")
                    console.print(f"[red]‚ùå Erro na opera√ß√£o: {e}[/red]")
                    wait_for_continue()
                    return True
            else:
                logger.warning(f"‚ö†Ô∏è Op√ß√£o inv√°lida selecionada: {choice}")
                console.print("[red]‚ùå Op√ß√£o inv√°lida. Escolha 0, 1, 2, 3 ou 4.[/red]")
        
    except KeyboardInterrupt:
        logger.debug("‚ö†Ô∏è Menu principal interrompido pelo usu√°rio")
        return False
    except Exception as e:
        logger.exception(f"‚ùå Erro no menu principal: {e}")
        console.print(f"[red]‚ùå Erro no menu: {e}[/red]")
        return False


def _show_quick_stats() -> None:
    """
    Exibe estat√≠sticas r√°pidas do sistema
    """
    show_statistics()


# Remover as fun√ß√µes duplicadas que agora est√£o em ui_helpers